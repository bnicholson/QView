import dayjs, { Dayjs } from "dayjs";

/**
 * This is the TournamentChangeset type generated by _tsync_, but with the `fromdate` and `todate` types replaced.
 */
export interface TournamentChangesetTS extends Omit<TournamentChangeset, "fromdate" | "todate"> {
  fromdate: Dayjs | null;
  todate: Dayjs | null;
}

/**
 * This is the Tournament type generated by _tsync_, but with the `fromdate` and `todate` types replaced.
 */
export interface TournamentTS extends Omit<Tournament, "fromdate" | "todate"> {
  fromdate: Dayjs | null;
  todate: Dayjs | null;
}

export interface TournamentCreateUpdateResult {
  code: number;
  message: string;
  data: TournamentTS;
}

/** Return a `TournamentTS` created from the given `Tournament`. */
const dateStringToDayjs = (tournament: Tournament): TournamentTS => {
  const { fromdate, todate, ...rest } = tournament;
  return {
    ...rest,
    fromdate: dayjs(tournament.fromdate),
    todate: dayjs(tournament.todate)
  };
};

export const TournamentAPI = {
  get: async (page: number, size: number) => {
    const response = await fetch(`/api/tournaments?page=${page}&page_size=${size}`);
    const result = await response.json();
    return result.map((tournament: Tournament) => dateStringToDayjs(tournament));
  },
  getByDate: async (fromDate: number, toDate: number): Promise<TournamentTS[]> => {
    const response = await fetch(`/api/tournaments?from_date=${fromDate}&to_date=${toDate}`);
    const result = await response.json();
    return result.map((tournament: Tournament) => dateStringToDayjs(tournament));
  },
  create: async (tournament: TournamentChangesetTS): Promise<TournamentCreateUpdateResult> => {
    let nquery = JSON.stringify(tournament);
    let response = await fetch('/api/tournaments', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: nquery,
      });
      const result = await response.json();
      console.log(result);
      const { data, ...rest } = result;
      return {
        ...rest,
        data: dateStringToDayjs(result.data)
      };
    },
  delete: async (id: number) =>
    await fetch(`/api/tournaments/${id}`, { method: 'DELETE' }),
  update: async (id: number, tournament: TournamentChangesetTS): Promise<TournamentCreateUpdateResult> => {
    const response = await fetch(`/api/tournaments/${id}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(tournament),
    });
    console.log({ response });
    const result = await response.json();
    console.log({ result });
    const { data, ...rest } = result;
    return {
      ...rest,
      data: dateStringToDayjs(result.data)
    };
  }
}
